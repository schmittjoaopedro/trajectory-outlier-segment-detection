rocplot(fitted, dat[-train, "y"], col = "red", add = "T")
x
x = rbind(x, matrix(rnorm(50 * 2), ncol = 2))
y = c(y, rep(0, 50))
x[y==0,2] = x[y==0,2] + 2
dat = data.frame(x = x, y = as.factor(y))
par(mfrow = c(1,1))
plot(x, col = c(y + 1))
svmfit = svm(y ~ ., data = dat, kernel = "radial", cost = 10, gamma = 1)
plot(svmfit, dat)
library(ISLR)
names(Khan)
dim(dat)
dat = data.frame(x = khan$xtrain, y = as.factor(Khan$ytrain))
names(Khan)
dat = data.frame(x = Khan$xtrain, y = as.factor(Khan$ytrain))
out = svm(y ~ ., data = dat, kernel = "linear", cost = 10)
summary(out)
table(out$fitted, dat$y)
dat.te = data.frame(x = Khan$xtest, y = as.factor(Khan$ytest))
pred.te = predict(out, newdata = dat.te)
table(pred.te, dat.te$y)
x1 = -10:10
x2 = 1 + 3 * x1
plot(x1, x2, type = "l", col = "red")
x1 = -20:20
x2 = 1 + 3 * x1
x1
x2
x1 = -10:10
x2 = 1 + 3 * x1
plot(x1, x2, type = "l", col = "red")
x1
x2
1 + 3*-29 + 10
1 + 3*-10 + 29
1 + 3*-9 + 26
1 + 3*-10 > 29
1 + 3*-11 > 29
1 + 3*-9 > 29
1 + 3*-9
1 + 3*9
1 + 3*-9
x1 = c(3, 2, 4, 1, 2, 4, 4)
x2 = c(4, 2, 4, 4, 1, 3, 1)
colors = c("red", "red", "red", "red", "blue", "blue", "blue")
plot(x1, x2, col = colors, xlim = c(0, 5), ylim = c(0, 5))
?abline
0.5 - 3 + 5
0.5 - 3 + 1
0.5 - 1 - 1
plot(x1, x2, col = colors, xlim = c(-5, 5), ylim = c(-5, 5))
abline(-0.5, 1)
abline(0, 0)
abline(1, 0)
plot(x1, x2, col = colors, xlim = c(-5, 5), ylim = c(-5, 5))
abline(-0.5, 1)
abline(0, 0)
abline(0, 1)
plot(x1, x2, col = colors, xlim = c(-5, 5), ylim = c(-5, 5))
abline(-0.5, 1)
abline(0, 0)
line(x = c(0,0), y = c(-1,1))
?line
?lin
?lien
line(x = (0,1), y = (0,-1))
line(x = c(0,1), y = c(0,-1))
0.5 - 3 + 1
0.5 + 1 - 1
set.seed(3154)
# Class one
x.one = runif(500, 0, 90)
x.one
x <- c(12 ,23 ,34 ,44 ,59 ,70 ,98)
x
mean(x)
sum(x) / length(x)
m <- sum(x) / length(x)
sqrt((x - m)^2/(length(x) - 1))
sqrt(sum((x - m)^2/(length(x) - 1))
)
sqrt(sum((x - m)^2)/(length(x) - 1))
sd(x)
sum((x - m)^2)/(length(x) - 1)
var(x)
x <- c(10,39,19,23,28)
y <- c(43, 13, 32,21, 20)
x
y
sum((x - mean(x))*(y - mean(y))) / (length(x) - 1)
cov(x,y)
x <- c(1,-1,4)
y <- c(2,1,3)
z <- c(1,3,-1)
xy <- sum((x - mean(x))*(y - mean(y))) / (length(x) - 1)
xz <- sum((x - mean(x))*(z - mean(z))) / (length(x) - 1)
yz <- sum((y - mean(y))*(z - mean(z))) / (length(y) - 1)
xy
xz
cov(x,z)
cov(x,y)
yz
cov(y,z)
m <- matrix(c(3, 0, 1, -4, 1, 2, -6, 0, -2), ncol = 3)
m
m <- matrix(c(3, 0, 1, -4, 1, 2, -6, 0, -2), ncol = 3, nrow = T)
m
m <- matrix(c(3, 0, 1, -4, 1, 2, -6, 0, -2), ncol = 3, byrow = T)
m
eigen(m)
t <- eigen(m)
t
t$values[2]
t$values[2] %*% t$vectors[2]
t$values[2] * t$vectors[2]
t$values[2] * t$vectors[2,]
m %*% t$vectors[2,]
m %*% t$vectors[2,]
t$vectors[2,]
t$vectors[,2]
t$values[2]
m %*% t$vectors[,2]
1 %*% t$vectors[,2]
1 * t$vectors[,2]
2 * t$vectors[,2]
2 * m
x <- 2 * m
x %*% t$vectors[,2]
data <- data.frame(x = c(2.5, 0.5, 2.2,1.9, 3.1,2.3,2,1,1.5,1.1), y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
data
dataAdjust = data.frame(x = c(.69,-1.31,.39,.09,1.29,.49,.19,-.81,-.31,-.71), y = c(.49,-1.21,.99,.29,1.09,0.79,-.31,-.81,-.31,-1.01))
dataAdjust
data
data[1,]
data[,1]
dataAdjust[,1] = data[,1] - mean(data[,1])
dataAdjust
dataAdjust[,2] = data[,2] - mean(data[,2])
dataAdjust
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust$x)-1)
sum(dataAdjust$x*dataAdjust$y)
(nrow(dataAdjust$x)-1)
nrow(dataAdjust)
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust)-1)
cov(dataAdjust)
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust))
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust)-1)
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust)-1)
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust)-1)
dataCov <- cov(dataAdjust)
dataCov
y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
x = data$x - mean(data$x),
y = (data$y - mean(data$y))
dataAdjust
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
dataCov
eigen(dataCov)$values
dataCov
eigen(dataCov)$vector
eigenvectors = eigen(dataCov)$vector
eigenvalues
eigenvalues = eigen(dataCov)$values
eigenvectors = eigen(dataCov)$vector
eigenvalues
dataCov
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1),
cov(dataAdjust)
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1)
dataCov
dataCov = matrix(byrow = T, c(
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1)
))
dataCov
dataCov = matrix(byrow = T, c(
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
))
dataCov
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
))
dataCov
eigenvalues = eigen(dataCov)$values
eigenvalues
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1)
))
eigen(dataCov)$values
eigenvalues = eigen(dataCov)$values
eigenvectors = eigen(dataCov)$dataAdjust
eigenvalues
eigenvectors
eigenvectors = eigen(dataCov)$vectors
eigenvectors
selectedvector = eigenvectors[,1]
selectedvector
selectedvalue = eigenvalues[1]
selectedvalue
t
t
# Step1 = The dataset
data <- data.frame(
x = c(2.5,0.5,2.2,1.9,3.1,2.3,2,1,1.5,1.1),
y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
# Step2 = Subtract the mean
dataAdjust = data.frame(
x = (data$x - mean(data$x)),
y = (data$y - mean(data$y))
)
# Step3 = Calculate the covariance matrix
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
))
# Step4 = Calculate the eigenvectors and eigen values
eigenvalues = eigen(dataCov)$values
eigenvectors = eigen(dataCov)$vectors
# Step5 = Deriving the new data set
selectedvector = eigenvectors[,1]
selectedvalue = eigenvalues[1]
selectedvector = t(selectedvector)
selectedvector
selectedvector
# Step1 = The dataset
data <- data.frame(
x = c(2.5,0.5,2.2,1.9,3.1,2.3,2,1,1.5,1.1),
y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
# Step2 = Subtract the mean
dataAdjust = data.frame(
x = (data$x - mean(data$x)),
y = (data$y - mean(data$y))
)
dataAdjust
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
))
dataCov
eigenvalues = eigen(dataCov)$values
eigenvectors = eigen(dataCov)$vectors
eigenvalues
eigenvectors
# Step1 = The dataset
data <- data.frame(
x = c(2.5,0.5,2.2,1.9,3.1,2.3,2,1,1.5,1.1),
y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
# Step2 = Subtract the mean
dataAdjust = data.frame(
x = (data$x - mean(data$x)),
y = (data$y - mean(data$y))
)
# Step3 = Calculate the covariance matrix
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1)
))
dataCov
eigenvalues = eigen(dataCov)$values
eigenvalues
eigenvectors
# Step1 = The dataset
data <- data.frame(
x = c(2.5,0.5,2.2,1.9,3.1,2.3,2,1,1.5,1.1),
y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
# Step2 = Subtract the mean
dataAdjust = data.frame(
x = (data$x - mean(data$x)),
y = (data$y - mean(data$y))
)
# Step3 = Calculate the covariance matrix
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
))
eigen(dataCov)$values
eigen(dataCov)$vectors
dataCov = cov(dataAdjust)
dataCov
eigenvalues = eigen(dataCov)$values
eigenvectors = eigen(dataCov)$vectors
eigenvalues
eigenvectors
selectedvector
selectedvector %*% dataAdjust[1,]
dataAdjust[1,]
selectedvector = eigenvectors[,1]
selectedvalue = eigenvalues[1]
selectedvector
selectedvector
t(selectedvector)
selectedvector = t(selectedvector)
selectedvector %*% dataAdjust[1,]
selectedvector %*% t(dataAdjust[1,])
dataAdjust
electedvector %*% t(dataAdjust)
selectedvector %*% t(dataAdjust)
selectedvector %*% t(dataAdjust)
xrotate = selectedvector %*% t(dataAdjust)
selectedvector %*% dataAdjust
xrotate = t(eigenvectors[,1]) %*% t(dataAdjust)
pca1vector = eigenvectors[,1]
pca1value = eigenvalues[1]
pca2vector = eigenvectors[,2]
pca2value = eigenvalues[2]
xrotate = t(selectedvector) %*% t(dataAdjust)
xrotate = t(pca1vector) %*% t(dataAdjust)
yrotate = t(pca2vector) %*% t(dataAdjust)
xrotate
yrotate
data = data.frame(x = xrotate, y = yrotate)
data
data = data.frame(x = t(xrotate), y = t(yrotate))
data
par(mfrow = c(1,2))
plot(data$x, data$y)
plot(xrotate, yrotate)
# Step1 = The dataset
data <- data.frame(
x = c(2.5,0.5,2.2,1.9,3.1,2.3,2,1,1.5,1.1),
y = c(2.4,0.7, 2.9,2.2, 3.0,2.7,1.6,1.1,1.6,0.9))
# Step2 = Subtract the mean
dataAdjust = data.frame(
x = (data$x - mean(data$x)),
y = (data$y - mean(data$y))
)
# Step3 = Calculate the covariance matrix
dataCov = matrix(byrow = T, ncol = 2, c(
sum(dataAdjust$x*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$x*dataAdjust$y)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$x)/(nrow(dataAdjust) - 1),
sum(dataAdjust$y*dataAdjust$y)/(nrow(dataAdjust) - 1)
))
dataCov = cov(dataAdjust)
# Step4 = Calculate the eigenvectors and eigen values
eigenvalues = eigen(dataCov)$values
eigenvectors = eigen(dataCov)$vectors
# Step5 = Deriving the new data set
pca1vector = eigenvectors[,1]
pca1value = eigenvalues[1]
pca2vector = eigenvectors[,2]
pca2value = eigenvalues[2]
# Data transformed
xrotate = t(pca1vector) %*% t(dataAdjust)
yrotate = t(pca2vector) %*% t(dataAdjust)
finalData = data.frame(x = t(xrotate), y = t(yrotate))
par(mfrow = c(1,2))
plot(finalData$x, finalData$y)
plot(xrotate, yrotate)
# Getting original data back
data
components = data.frame(pca1 = pca1vector, pca2 = pca2vector)
components
pca1vector
t(components) * finalData
mean(data)
data
apply(data, 2, mean)
(t(components) * finalData) + apply(data, 2, mean)
t(components) * finalData
dataAdjust
pca1value
pca2value
pca1vector
pca2vector
xrotate = t(pca1vector) %*% t(dataAdjust)
yrotate = t(pca2vector) %*% t(dataAdjust)
finalData = data.frame(x = t(xrotate), y = t(yrotate))
par(mfrow = c(1,2))
plot(finalData$x, finalData$y)
plot(xrotate, yrotate)
components
eigen(dataCov)$vectors
finalData
par(mfrow = c(1,2))
t(components)
finalData
components * finalData
components %*% finalData
components
as.matrix(components)
as.matrix(components) %*% finalData
components
t(components) %*% finalData
t(components) * finalData
as.matrix(components) * finalData
t(components) * finalData
t(components) %*% finalData[,1]
finalData[,1]
t(components) %*% finalData[1,]
finalData[1,]
t(components)
t(components) %*% t(finalData[1,])
(t(components) %*% t(finalData[1,])) + apply(data, 2, mean)
data
components %*% t(finalData[1,])
as.matrix(components) %*% t(finalData[1,])
(as.matrix(components) %*% t(finalData[1,])) + apply(data, 2, mean)
as.matrix(components) %*% t(finalData)
(as.matrix(components) %*% t(finalData)) + apply(data, 2, mean)
x1 <- c(1,2,3,4,5,6,7,8,9)
y1 <- c(0.61,1.75,3.26,3.55,5.42,6.15,6.84,8.12,8.73)
plot(x1,y1)
x2 <- c(1,2,3.04, 4.08,5.13,6.16,7.18,8.20,9.22)
y2 <- c(0.61,1.75,3.28,5.41,6.40,7.16,8.29,9.06)
par(mfrow = c(2,1))
plot(x1,y1)
plot(x2,y2)
par(mfrow = c(1,2))
plot(x1,y1)
x2 <- c(1,2,3.04, 4.08,5.13,6.16,7.18,8.20,9.22)
y2 <- c(0.61,1.75,3.28,3.81,5.41,6.40,7.16,8.29,9.06)
plot(x2,y2)
lm(y1 ~ x2)
summary(lm(y1 ~ x1))
summary(lm(y2 ~ x2))
setwd("/home/joao/Área de Trabalho/Mestrado/Estatísticas")
#setwd("/home/joao/Área de Trabalho/Mestrado/output/TODSv2/Joinville")
data <- read.csv("statistics_eua3.csv")
#data <- read.csv("Test.csv", header = F, sep = ";")
#temp <- data.frame(y = data$QT, x = data$PTQTDALL)
temp <- data.frame(y = data$CT, x = data$PTQTDALL)
#temp <- data.frame(y = data$GT, x = data$PTQTDALL)
#temp <- data.frame(y = data$STDT, x = data$PTQTDALL)
#temp <- data.frame(y = data$SEGT, x = data$PTQTDALL)
temp$y <- temp$y / 10^9
temp <- temp[order(temp$x),]
options(scipen=5)
plot(temp$x, temp$y, pch = 19, col = "lightgray", xlab = "Número de pontos",
ylab = "Tempo da consulta (s)")
title(main = "Tempo de consulta da base - Joinville (Brasil)")
glm1 = glm(temp$y ~ temp$x, family = "poisson")
lines(temp$x, glm1$fitted.values, col = "black", lwd = 3)
#temp <- read.csv("temp.csv", header = F, sep = ";")
#plot(temp[,1],temp[,2])
setwd("/home/joao/Área de Trabalho/Mestrado/Estatísticas")
#setwd("/home/joao/Área de Trabalho/Mestrado/output/TODSv2/Joinville")
data <- read.csv("statistics_eua3.csv")
#data <- read.csv("Test.csv", header = F, sep = ";")
#temp <- data.frame(y = data$QT, x = data$PTQTDALL)
#temp <- data.frame(y = data$CT, x = data$PTQTDALL)
temp <- data.frame(y = data$GT, x = data$PTQTDALL)
#temp <- data.frame(y = data$STDT, x = data$PTQTDALL)
#temp <- data.frame(y = data$SEGT, x = data$PTQTDALL)
temp$y <- temp$y / 10^9
temp <- temp[order(temp$x),]
options(scipen=5)
plot(temp$x, temp$y, pch = 19, col = "lightgray", xlab = "Número de pontos",
ylab = "Tempo da consulta (s)")
title(main = "Tempo de consulta da base - Joinville (Brasil)")
glm1 = glm(temp$y ~ temp$x, family = "poisson")
lines(temp$x, glm1$fitted.values, col = "black", lwd = 3)
#temp <- read.csv("temp.csv", header = F, sep = ";")
#plot(temp[,1],temp[,2])
setwd("/home/joao/Área de Trabalho/Mestrado/Estatísticas")
#setwd("/home/joao/Área de Trabalho/Mestrado/output/TODSv2/Joinville")
data <- read.csv("statistics_eua3.csv")
#data <- read.csv("Test.csv", header = F, sep = ";")
#temp <- data.frame(y = data$QT, x = data$PTQTDALL)
#temp <- data.frame(y = data$CT, x = data$PTQTDALL)
#temp <- data.frame(y = data$GT, x = data$PTQTDALL)
temp <- data.frame(y = data$STDT, x = data$PTQTDALL)
#temp <- data.frame(y = data$SEGT, x = data$PTQTDALL)
temp$y <- temp$y / 10^9
temp <- temp[order(temp$x),]
options(scipen=5)
plot(temp$x, temp$y, pch = 19, col = "lightgray", xlab = "Número de pontos",
ylab = "Tempo da consulta (s)")
title(main = "Tempo de consulta da base - Joinville (Brasil)")
glm1 = glm(temp$y ~ temp$x, family = "poisson")
lines(temp$x, glm1$fitted.values, col = "black", lwd = 3)
#temp <- read.csv("temp.csv", header = F, sep = ";")
#plot(temp[,1],temp[,2])
setwd("/home/joao/Área de Trabalho/Mestrado/Estatísticas")
#setwd("/home/joao/Área de Trabalho/Mestrado/output/TODSv2/Joinville")
data <- read.csv("statistics_eua3.csv")
#data <- read.csv("Test.csv", header = F, sep = ";")
#temp <- data.frame(y = data$QT, x = data$PTQTDALL)
#temp <- data.frame(y = data$CT, x = data$PTQTDALL)
#temp <- data.frame(y = data$GT, x = data$PTQTDALL)
#temp <- data.frame(y = data$STDT, x = data$PTQTDALL)
temp <- data.frame(y = data$SEGT, x = data$PTQTDALL)
temp$y <- temp$y / 10^9
temp <- temp[order(temp$x),]
options(scipen=5)
plot(temp$x, temp$y, pch = 19, col = "lightgray", xlab = "Número de pontos",
ylab = "Tempo da consulta (s)")
title(main = "Tempo de consulta da base - Joinville (Brasil)")
glm1 = glm(temp$y ~ temp$x, family = "poisson")
lines(temp$x, glm1$fitted.values, col = "black", lwd = 3)
#temp <- read.csv("temp.csv", header = F, sep = ";")
#plot(temp[,1],temp[,2])
